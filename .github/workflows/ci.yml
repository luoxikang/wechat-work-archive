name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.10'
  NODE_VERSION: '18'

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r api/requirements-dev.txt

      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 api/src --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 api/src --count --max-complexity=10 --max-line-length=120 --statistics

      - name: Check formatting with black
        run: black --check --diff api/src

      - name: Check imports with isort
        run: isort --check-only --diff api/src

      - name: Type checking with mypy
        run: mypy api/src --ignore-missing-imports

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: Run bandit security scan
        run: bandit -r api/src -f json -o bandit-report.json
        continue-on-error: true

      - name: Run safety check
        run: safety check --json --output safety-report.json
        continue-on-error: true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r api/requirements-dev.txt

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U test_user; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Wait for Redis
        run: |
          until redis-cli -h localhost -p 6379 ping; do
            echo "Waiting for Redis..."
            sleep 2
          done

      - name: Run unit tests
        env:
          DATABASE_URL: postgresql://test_user:testpass@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          TESTING: true
          SECRET_KEY: test-secret-key
          CORP_ID: test_corp_id
          SECRET: test_secret
          ENCODING_AES_KEY: test_encoding_key
        run: |
          cd api
          python -m pytest tests/unit -v --cov=src --cov-report=xml --cov-report=term-missing --cov-fail-under=80

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://test_user:testpass@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          TESTING: true
          SECRET_KEY: test-secret-key
          CORP_ID: test_corp_id
          SECRET: test_secret
          ENCODING_AES_KEY: test_encoding_key
        run: |
          cd api
          python -m pytest tests/integration -v --timeout=30

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./api/coverage.xml
          fail_ci_if_error: true
          verbose: true

  build-docker:
    needs: [lint, test, security-scan]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker image (test stage)
        run: |
          docker build --target test --tag wechat-api:test-${{ github.sha }} ./api

      - name: Build Docker image (production stage)
        run: |
          docker build --target production --tag wechat-api:latest-${{ github.sha }} ./api

      - name: Run Docker Compose tests
        run: |
          # Create temporary .env file for testing
          cat > .env << EOF
          CORP_ID=test_corp_id
          SECRET=test_secret
          ENCODING_AES_KEY=test_encoding_key
          DB_PASSWORD=test_password
          REDIS_PASSWORD=
          GRAFANA_PASSWORD=admin
          EOF

          # Run tests with Docker Compose
          docker-compose -f docker/docker-compose.test.yml up --abort-on-container-exit --exit-code-from api-test
          docker-compose -f docker/docker-compose.test.yml down -v

      - name: Check Docker image security
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v $PWD:/tmp aquasec/trivy image --exit-code 1 --severity HIGH,CRITICAL \
            wechat-api:latest-${{ github.sha }}

  performance-test:
    needs: [build-docker]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install locust
        run: pip install locust

      - name: Start test environment
        run: |
          # Create temporary .env file
          cat > .env << EOF
          CORP_ID=test_corp_id
          SECRET=test_secret
          ENCODING_AES_KEY=test_encoding_key
          DB_PASSWORD=test_password
          REDIS_PASSWORD=
          GRAFANA_PASSWORD=admin
          EOF

          # Start services
          docker-compose -f docker/docker-compose.dev.yml up -d postgres redis

          # Wait for services
          sleep 30

      - name: Run performance tests
        run: |
          # Start API in background
          cd api
          DATABASE_URL=postgresql://dev_user:dev_password@localhost:5433/wechat_archive_dev \
          REDIS_URL=redis://localhost:6380/0 \
          uvicorn src.app:app --host 0.0.0.0 --port 8001 &

          # Wait for API to start
          sleep 10

          # Run basic performance test
          locust -f tests/performance/locustfile.py --host=http://localhost:8001 \
            --users 10 --spawn-rate 2 --run-time 60s --headless

      - name: Cleanup
        if: always()
        run: |
          docker-compose -f docker/docker-compose.dev.yml down -v

  dependency-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Check for known security vulnerabilities
        run: |
          pip install safety
          safety check -r api/requirements.txt

      - name: Check for outdated dependencies
        run: |
          pip install pip-audit
          pip-audit -r api/requirements.txt

  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0

      - name: SonarCloud Scan
        uses: sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=wechat-work-archive
            -Dsonar.organization=your-org
            -Dsonar.sources=api/src
            -Dsonar.tests=api/tests
            -Dsonar.python.coverage.reportPaths=api/coverage.xml
            -Dsonar.exclusions=**/*.md,**/migrations/**

  notify:
    needs: [lint, test, security-scan, build-docker]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify on success
        if: |
          needs.lint.result == 'success' &&
          needs.test.result == 'success' &&
          needs.security-scan.result == 'success' &&
          needs.build-docker.result == 'success'
        run: |
          echo "✅ All CI checks passed!"

      - name: Notify on failure
        if: |
          needs.lint.result == 'failure' ||
          needs.test.result == 'failure' ||
          needs.security-scan.result == 'failure' ||
          needs.build-docker.result == 'failure'
        run: |
          echo "❌ CI checks failed!"
          exit 1